(window["webpackJsonpPluginswag-pay-pal"]=window["webpackJsonpPluginswag-pay-pal"]||[]).push([[799],{7534:function(){},4231:function(){},464:function(){},5921:function(){},4965:function(){},1719:function(){},6313:function(){},3778:function(){},6785:function(){},6515:function(){},9183:function(){},2784:function(){Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"swag_paypal",key:"swag_paypal",roles:{viewer:{privileges:["sales_channel:read","sales_channel_payment_method:read","system_config:read"],dependencies:[]},editor:{privileges:["sales_channel:update","sales_channel_payment_method:create","sales_channel_payment_method:update","system_config:update","system_config:create","system_config:delete"],dependencies:["swag_paypal.viewer"]}}}),Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:null,key:"sales_channel",roles:{viewer:{privileges:["swag_paypal_pos_sales_channel:read","swag_paypal_pos_sales_channel_run:read","swag_paypal_pos_sales_channel_run:update","swag_paypal_pos_sales_channel_run:create","swag_paypal_pos_sales_channel_run_log:read","sales_channel_payment_method:read"]},editor:{privileges:["swag_paypal_pos_sales_channel:update","swag_paypal_pos_sales_channel_run:delete","payment_method:update"]},creator:{privileges:["swag_paypal_pos_sales_channel:create","payment_method:create","shipping_method:create","delivery_time:create"]},deleter:{privileges:["swag_paypal_pos_sales_channel:delete"]}}})},4799:function(e,n,a){"use strict";a.r(n),a(2784),a(2862);var t={MERCHANT_LOCATION_GERMANY:"germany",MERCHANT_LOCATION_OTHER:"other"};let{Component:l,Defaults:s}=Shopware,{Criteria:i}=Shopware.Data,{hasOwnProperty:o}=Shopware.Utils.object;l.register("swag-paypal",{template:'{% block swag_paypal %}\n    <sw-page class="swag-paypal">\n\n        {% block swag_paypal_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="regular-chevron-right-xs" small></sw-icon>\n                    {{ $tc(\'swag-paypal.header\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_actions %}\n            <template #smart-bar-actions>\n                {% block swag_paypal_actions_save %}\n                    <sw-button-process\n                        v-model:value="isSaveSuccessful"\n                        class="sw-settings-login-registration__save-action"\n                        variant="primary"\n                        :isLoading="isLoading"\n                        :disabled="isLoading || savingDisabled || hasError || !acl.can(\'swag_paypal.editor\')"\n                        @click="onSave">\n                        {{ $tc(\'global.default.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_content %}\n            <template #content>\n\n                {% block swag_paypal_content_card %}\n                    <sw-card-view>\n\n                        {% block swag_paypal_content_tabs %}\n                            <sw-tabs\n                                default-item="general"\n                                position-identifier="swag-paypal-content-tabs">\n                                <template #default="{ active }">\n                                    <sw-tabs-item\n                                        key="general"\n                                        :active-tab="active"\n                                        :route="{ name: \'swag.paypal.index\', params: { tab: \'general\' } }">\n                                        {{ $tc(\'swag-paypal.tabs.general\') }}\n                                    </sw-tabs-item>\n                                    <sw-tabs-item\n                                        key="storefront"\n                                        :active-tab="active"\n                                        :route="{ name: \'swag.paypal.index\', params: { tab: \'storefront\' } }">\n                                        {{ $tc(\'swag-paypal.tabs.storefront\') }}\n                                    </sw-tabs-item>\n                                    <sw-tabs-item\n                                        key="advanced"\n                                        :active-tab="active"\n                                        :route="{ name: \'swag.paypal.index\', params: { tab: \'advanced\' } }">\n                                        {{ $tc(\'swag-paypal.tabs.advanced\') }}\n                                    </sw-tabs-item>\n                                </template>\n                            </sw-tabs>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config %}\n                            <sw-sales-channel-config\n                                v-model:value="config"\n                                ref="configComponent"\n                                domain="SwagPayPal.settings">\n\n                                {% block swag_paypal_content_card_channel_config_sales_channel %}\n                                    <template #select="{ onInput, selectedSalesChannelId }">\n\n                                        {% block swag_paypal_content_card_channel_config_sales_channel_card %}\n                                            <sw-card position-identifier="swag-paypal-sales-channel-card"\n                                                     :title="$tc(\'global.entities.sales_channel\', 2)">\n\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_title %}\n                                                    <sw-single-select\n                                                        v-model:value="selectedSalesChannelId"\n                                                        labelProperty="translated.name"\n                                                        valueProperty="id"\n                                                        :isLoading="isLoading"\n                                                        :options="salesChannels"\n                                                        :disabled="!acl.can(\'swag_paypal.editor\')"\n                                                        @update:value="onInput">\n                                                    </sw-single-select>\n                                                {% endblock %}\n\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_footer %}\n                                                    <template #footer>\n\n                                                        {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container %}\n                                                        <sw-container columns="2fr 1fr"\n                                                                      gap="0px 30px">\n\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_text %}\n                                                                <p>{{ $tc(\'swag-paypal.saleschannelCard.button.description\') }}</p>\n                                                            {% endblock %}\n\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_button %}\n                                                                <sw-button-process\n                                                                    v-model:processSuccess="isSetDefaultPaymentSuccessful"\n                                                                    :isLoading="isSettingDefaultPaymentMethods"\n                                                                    :disabled="!acl.can(\'swag_paypal.editor\')"\n                                                                    @click="onSetPaymentMethodDefault">\n                                                                    {{ $tc(\'swag-paypal.saleschannelCard.button.label\') }}\n                                                                </sw-button-process>\n                                                            {% endblock %}\n\n                                                        </sw-container>\n                                                        {% endblock %}\n\n                                                    </template>\n                                                {% endblock %}\n\n                                            </sw-card>\n                                        {% endblock %}\n\n                                    </template>\n                                {% endblock %}\n\n                                {% block swag_paypal_content_card_channel_config_cards %}\n                                    <template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }">\n                                        {% block swag_paypal_content_card_channel_config_webhook %}\n                                        <swag-paypal-webhook\n                                            v-if="tab === \'advanced\'"\n                                            :isLoading="isLoading"\n                                            :selectedSalesChannelId="selectedSalesChannelId"\n                                        />\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_cross_border %}\n                                        <swag-paypal-cross-border\n                                            v-if="tab === \'advanced\'"\n                                            :isLoading="isLoading"\n                                            :actual-config-data="actualConfigData"\n                                            :all-configs="allConfigs"\n                                            :selected-sales-channel-id="selectedSalesChannelId"\n                                        />\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_credentials_card %}\n                                            <swag-paypal-credentials v-if="tab === \'general\'"\n                                                                     :actualConfigData="actualConfigData"\n                                                                     :allConfigs="allConfigs"\n                                                                     :selectedSalesChannelId="selectedSalesChannelId"\n                                                                     :clientIdErrorState="clientIdErrorState"\n                                                                     :clientSecretErrorState="clientSecretErrorState"\n                                                                     :clientIdSandboxErrorState="clientIdSandboxErrorState"\n                                                                     :clientSecretSandboxErrorState="clientSecretSandboxErrorState"\n                                                                     :clientIdFilled="clientIdFilled"\n                                                                     :clientSecretFilled="clientSecretFilled"\n                                                                     :clientIdSandboxFilled="clientIdSandboxFilled"\n                                                                     :clientSecretSandboxFilled="clientSecretSandboxFilled"\n                                                                     :isLoading="isLoading">\n                                            </swag-paypal-credentials>\n                                        {% endblock %}\n\n                                        {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                                        {% block swag_paypal_content_card_channel_config_plus %}\n                                            <swag-paypal-plus v-if="showPlusCard && tab === \'storefront\'"\n                                                              :actualConfigData="actualConfigData"\n                                                              :allConfigs="allConfigs"\n                                                              :selectedSalesChannelId="selectedSalesChannelId">\n                                            </swag-paypal-plus>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_behavior %}\n                                            <swag-paypal-behavior v-if="tab === \'general\'"\n                                                                  :actualConfigData="actualConfigData"\n                                                                  :allConfigs="allConfigs"\n                                                                  :selectedSalesChannelId="selectedSalesChannelId">\n                                            </swag-paypal-behavior>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_vaulting %}\n                                            <swag-paypal-vaulting v-if="tab === \'general\'"\n                                                                  :actualConfigData="actualConfigData"\n                                                                  :allConfigs="allConfigs"\n                                                                  :selectedSalesChannelId="selectedSalesChannelId"\n                                                                  :isSaveSuccessful="isSaveSuccessful">\n                                            </swag-paypal-vaulting>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_express %}\n                                            <swag-paypal-express v-if="tab === \'storefront\'"\n                                                                 :actualConfigData="actualConfigData"\n                                                                 :allConfigs="allConfigs"\n                                                                 :selectedSalesChannelId="selectedSalesChannelId"\n                                                                 @preventSave="preventSave">\n                                            </swag-paypal-express>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_installment %}\n                                            <swag-paypal-installment v-if="tab === \'storefront\'"\n                                                                     :actualConfigData="actualConfigData"\n                                                                     :allConfigs="allConfigs"\n                                                                     :selectedSalesChannelId="selectedSalesChannelId">\n                                            </swag-paypal-installment>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_acdc %}\n                                            <swag-paypal-acdc v-if="tab === \'general\'"\n                                                              :actualConfigData="actualConfigData"\n                                                              :allConfigs="allConfigs"\n                                                              :selectedSalesChannelId="selectedSalesChannelId">\n                                            </swag-paypal-acdc>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_pui %}\n                                            <swag-paypal-pui v-if="tab === \'general\'"\n                                                             :actualConfigData="actualConfigData"\n                                                             :allConfigs="allConfigs"\n                                                             :selectedSalesChannelId="selectedSalesChannelId">\n                                            </swag-paypal-pui>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_content_card_channel_config_spb %}\n                                            <swag-paypal-spb v-if="showSPBCard && tab === \'storefront\'"\n                                                             :actualConfigData="actualConfigData"\n                                                             :allConfigs="allConfigs"\n                                                             :selectedSalesChannelId="selectedSalesChannelId"\n                                                             @preventSave="preventSave">\n                                            </swag-paypal-spb>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n\n                            </sw-sales-channel-config>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_loading %}\n                            <sw-loader v-if="isLoading"></sw-loader>\n                        {% endblock %}\n\n                    </sw-card-view>\n                {% endblock %}\n\n            </template>\n        {% endblock %}\n\n    </sw-page>\n{% endblock %}\n',inject:["SwagPayPalApiCredentialsService","SwagPaypalPaymentMethodService","repositoryFactory","acl"],mixins:["notification"],data(){return{isLoading:!1,isSaveSuccessful:!1,isTestSuccessful:!1,isTestSandboxSuccessful:!1,clientIdFilled:!1,clientSecretFilled:!1,clientIdSandboxFilled:!1,clientSecretSandboxFilled:!1,sandboxChecked:!1,salesChannels:[],config:{},isSetDefaultPaymentSuccessful:!1,isSettingDefaultPaymentMethods:!1,savingDisabled:!1,messageBlankErrorState:null,showCredentials:!1,allowShowCredentials:!0,...t}},metaInfo(){return{title:this.$createTitle()}},computed:{showSPBCard(){if(o(this.config,"SwagPayPal.settings.merchantLocation")&&null!==this.config["SwagPayPal.settings.merchantLocation"])return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_OTHER;let e=this.$refs.configComponent?.allConfigs.null;return!!e&&e["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_OTHER},showPlusCard(){if(o(this.config,"SwagPayPal.settings.merchantLocation")&&null!==this.config["SwagPayPal.settings.merchantLocation"])return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_GERMANY;let e=this.$refs.configComponent?.allConfigs.null;return!!e&&e["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_GERMANY},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},clientIdErrorState(){return this.sandboxChecked||this.clientIdFilled?null:this.messageBlankErrorState},clientSecretErrorState(){return this.sandboxChecked||this.clientSecretFilled?null:this.messageBlankErrorState},clientIdSandboxErrorState(){return!this.sandboxChecked||this.clientIdSandboxFilled?null:this.messageBlankErrorState},clientSecretSandboxErrorState(){return!this.sandboxChecked||this.clientSecretSandboxFilled?null:this.messageBlankErrorState},hasError(){return!this.sandboxChecked&&!(this.clientIdFilled&&this.clientSecretFilled)||this.sandboxChecked&&!(this.clientIdSandboxFilled&&this.clientSecretSandboxFilled)},salesChannelCriteria(){let e=new i(1,500);return e.addFilter(i.equalsAny("typeId",[s.storefrontSalesChannelTypeId,s.apiSalesChannelTypeId])),e},tab(){return this.$route.params.tab||"general"}},watch:{config:{handler(){let e=this.$refs.configComponent?.allConfigs?.null;null===this.$refs.configComponent?.selectedSalesChannelId?(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]):(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"]||!!e["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"]||!!e["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"]||!!e["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"]||!!e["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]||!!e["SwagPayPal.settings.sandbox"])},deep:!0}},created(){this.createdComponent()},methods:{createdComponent(){this.$route.params.tab||this.$router.push({name:"swag.paypal.index",params:{tab:"general"}}),this.isLoading=!0,this.salesChannelRepository.search(this.salesChannelCriteria,Shopware.Context.api).then(e=>{e.add({id:null,translated:{name:this.$tc("sw-sales-channel-switch.labelDefaultOption")}}),this.salesChannels=e}).finally(()=>{this.isLoading=!1}),this.messageBlankErrorState={code:1,detail:this.$tc("swag-paypal.messageNotBlank")}},onSave(){this.hasError||this.save()},onChangeLoading(e){this.isLoading=e},save(){this.isLoading=!0,this.$refs.configComponent.save().then(e=>{if(this.isSaveSuccessful=!0,e.payPalWebhookErrors){let n=this.$tc("swag-paypal.settingForm.messageWebhookError");e.payPalWebhookErrors.forEach(e=>{this.createNotificationError({message:`${n}<br><br><ul><li>${e}</li></ul>`})})}}).finally(()=>{this.isLoading=!1})},onSetPaymentMethodDefault(){this.isSettingDefaultPaymentMethods=!0,this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(this.$refs.configComponent?.selectedSalesChannelId).then(()=>{this.isSettingDefaultPaymentMethods=!1,this.isSetDefaultPaymentSuccessful=!0})},preventSave(e){if(!e){this.savingDisabled=!1;return}this.savingDisabled=!0},onChangeCredentialsVisibility(e){this.showCredentials=e}}}),a(751);let{Component:r}=Shopware;r.register("swag-paypal-settings-hint",{template:'{% block swag_paypal_settings_hint %}\n    <p class="swag-paypal-settings-hint">\n        {{ hintText }}\n    </p>\n{% endblock %}\n',props:{hintText:{type:String,required:!0}}});let{Component:c}=Shopware;c.register("swag-paypal-acdc",{template:'{% block swag_paypal_content_card_channel_config_acdc %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-acdc"\n             :title="$tc(\'swag-paypal.settingForm.acdc.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_acdc_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-acdc-fields">\n\n                {% block swag_paypal_content_card_channel_config_acdc_settings_detail_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.acdcForce3DS\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.acdcForce3DS\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.acdcForce3DS"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.acdc.acdcForce3DS.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.acdc.acdcForce3DS.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},methods:{checkBoolFieldInheritance(e){return"boolean"!=typeof e}}});let{Component:p}=Shopware,{Criteria:d}=Shopware.Data;p.register("swag-paypal-behavior",{template:'{% block swag_paypal_content_card_channel_config_behavior %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-behavior"\n             :title="$tc(\'swag-paypal.settingForm.behavior.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_behavior_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-behavior-field">\n\n                {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                {% block swag_paypal_content_card_channel_config_behavior_settings_merchant_location %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.merchantLocation\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.merchantLocation\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.behavior.merchantLocation.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.merchantLocation"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="merchantLocationOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_intent %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.intent\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.intent\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.behavior.intent.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.intent"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="intentOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_submit_cart %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.submitCart\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.submitCart\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.submitCart"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behavior.submitCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behavior.submitCart.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_brand_name %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.brandName\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.brandName\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.brandName"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.behavior.brandName.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.behavior.brandName.tooltipText\')"\n                                           :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                           :value="props.currentValue"\n                                           @update:value="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_landing_page %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.landingPage\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.landingPage\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.behavior.landingPage.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.landingPage"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="landingPageOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_landing_page_hint %}\n                                <swag-paypal-settings-hint :hintText="landingPageHint"></swag-paypal-settings-hint>\n                            {% endblock %}\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_send_order_number %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.sendOrderNumber\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sendOrderNumber\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.sendOrderNumber"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behavior.sendOrderNumber.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behavior.sendOrderNumber.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_order_number %}\n                    <sw-container columns="1fr 1fr" gap="0px 30px">\n\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_prefix %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.orderNumberPrefix\']"\n                                :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.orderNumberPrefix\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.orderNumberPrefix"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.behavior.orderNumberPrefix.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.behavior.orderNumberPrefix.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_suffix %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.orderNumberSuffix\']"\n                                :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.orderNumberSuffix\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.orderNumberSuffix"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.behavior.orderNumberSuffix.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.behavior.orderNumberSuffix.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                    </sw-container>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.excludedProductIds\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.excludedProductIds\']"\n                        :customInheritationCheckFunction="checkArrayFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.behavior.excludedProductIds.label\')"\n                        :helpText="$tc(\'swag-paypal.settingForm.behavior.excludedProductIds.tooltipText\')"\n                    >\n                        <template #content="props">\n                            <sw-entity-multi-id-select\n                                name="SwagPayPal.settings.excludedProductIds"\n                                :repository="productRepository"\n                                :criteria="excludedProductCriteria"\n                                :mapInheritance="props"\n                                :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                :ids="props.currentValue"\n                                @update:ids="props.updateCurrentValue"\n                            >\n\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_label_property %}\n                                    <template #selection-label-property="{ item }">\n                                        <sw-product-variant-info\n                                            :variations="item.variation"\n                                        >\n                                            {{ item.translated.name || item.name }}\n                                        </sw-product-variant-info>\n                                    </template>\n                                {% endblock %}\n\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_result_label_property %}\n                                    <template #result-label-property="{ item, searchTerm, highlightSearchTerm }">\n                                        <sw-product-variant-info\n                                            :variations="item.variation"\n                                        >\n                                            {{ item.translated.name || item.name }}\n                                        </sw-product-variant-info>\n                                    </template>\n                                {% endblock %}\n\n                            </sw-entity-multi-id-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_streams_ids %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.excludedProductStreamIds\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.excludedProductStreamIds\']"\n                        :customInheritationCheckFunction="checkArrayFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.behavior.excludedProductStreamIds.label\')"\n                        :helpText="$tc(\'swag-paypal.settingForm.behavior.excludedProductStreamIds.tooltipText\')"\n                    >\n                        <template #content="props">\n                            <sw-entity-multi-id-select\n                                name="SwagPayPal.settings.excludedProductStreamIds"\n                                :repository="productStreamRepository"\n                                :mapInheritance="props"\n                                :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                :ids="props.currentValue"\n                                @update:ids="props.updateCurrentValue"\n                            ></sw-entity-multi-id-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["repositoryFactory","acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},data(){return{...t}},computed:{intentOptions(){return[{id:"CAPTURE",name:this.$tc("swag-paypal.settingForm.behavior.intent.CAPTURE")},{id:"AUTHORIZE",name:this.$tc("swag-paypal.settingForm.behavior.intent.AUTHORIZE")}]},merchantLocationOptions(){return[{id:this.MERCHANT_LOCATION_GERMANY,name:this.$tc("swag-paypal.settingForm.behavior.merchantLocation.germany")},{id:this.MERCHANT_LOCATION_OTHER,name:this.$tc("swag-paypal.settingForm.behavior.merchantLocation.other")}]},landingPageOptions(){return[{id:"LOGIN",name:this.$tc("swag-paypal.settingForm.behavior.landingPage.options.login")},{id:"GUEST_CHECKOUT",name:this.$tc("swag-paypal.settingForm.behavior.landingPage.options.guest_checkout")},{id:"NO_PREFERENCE",name:this.$tc("swag-paypal.settingForm.behavior.landingPage.options.no_preference")}]},landingPageHint(){let e=this.actualConfigData["SwagPayPal.settings.landingPage"]||"NO_PREFERENCE";e=e.toLowerCase();let n=`swag-paypal.settingForm.behavior.landingPage.helpText.${e}`;return this.$tc(n)},productRepository(){return this.repositoryFactory.create("product")},productStreamRepository(){return this.repositoryFactory.create("product_stream")},excludedProductCriteria(){let e=new d(1,25);return e.addAssociation("options.group"),e}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkArrayFieldInheritance(e){return!Array.isArray(e)||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}}),a(2914);let{Component:g,Context:u}=Shopware,{Criteria:h}=Shopware.Data;g.register("swag-paypal-checkout",{template:'{% block swag_paypal_content_card_channel_config_checkout %}\n<sw-card\n    class="sw-card--grid"\n    position-identifier="swag-paypal-checkout"\n    :is-loading="isLoading || isLoadingPaymentMethods"\n    :title="$tc(\'swag-paypal.settingForm.checkout.cardTitle\')"\n>\n    <template #avatar>\n        {% block swag_paypal_content_card_channel_config_checkout_avatar %}\n        <img\n            :src="assetFilter(\'swagpaypal/static/img/paypal-logo-avatar.svg\')"\n            :alt="$tc(\'swag-paypal.settingForm.checkout.appImageAlt\')"\n        >\n        {% endblock %}\n    </template>\n\n    <template #header-right>\n        {% block swag_paypal_content_card_channel_config_checkout_settings_link %}\n        <sw-internal-link :routerLink="{ name: \'swag.paypal.index\' }">\n            {{ $tc(\'swag-paypal.settingForm.checkout.settingsLink\') }}\n        </sw-internal-link>\n        {% endblock %}\n    </template>\n\n    {% block swag_paypal_content_card_channel_config_checkout_container %}\n    <div class="swag-paypal-checkout">\n\n        {% block swag_paypal_content_card_channel_config_checkout_container_box %}\n        <div :class="{\'swag-paypal-checkout__box\': showMerchantInformation }">\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_sandbox_switch %}\n            <sw-inherit-wrapper v-if="showSandboxToggle"\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.sandbox\']"\n                                class="swag-paypal-checkout__sandbox-toggle"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sandbox\']"\n                                :customInheritationCheckFunction="checkBoolFieldInheritance">\n                <template #content="props">\n                    <sw-switch-field v-tooltip.left="{\n                                         message: isSandbox ? $tc(\'swag-paypal.settingForm.checkout.sandbox.onlySandboxTooltip\') : $tc(\'swag-paypal.settingForm.checkout.sandbox.onlyLiveTooltip\'),\n                                         disabled: !sandboxToggleDisabled,\n                                     }"\n                                     name="SwagPayPal.settings.sandbox"\n                                     :mapInheritance="props"\n                                     :label="$tc(\'swag-paypal.settingForm.checkout.sandbox.label\')"\n                                     :helpText="$tc(\'swag-paypal.settingForm.checkout.sandbox.helpText\')"\n                                     :disabled="sandboxToggleDisabled || props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                     :value="props.currentValue"\n                                     @update:value="props.updateCurrentValue">\n                    </sw-switch-field>\n                </template>\n            </sw-inherit-wrapper>\n            {% endblock %}\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_header %}\n            <p\n                v-if="!showMerchantInformation"\n                class="swag-paypal-checkout__header"\n            >\n                {{ $tc(\'swag-paypal.settingForm.checkout.header\') }}\n            </p>\n            {% endblock %}\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_description %}\n            <p\n                v-if="!showMerchantInformation"\n                class="swag-paypal-checkout__description"\n            >\n                {{ $tc(\'swag-paypal.settingForm.checkout.description\') }}\n            </p>\n            {% endblock %}\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_banner %}\n            <sw-alert\n                v-if="!isOnboardingPPCPFinished"\n                variant="info"\n                class="swag-paypal-checkout__banner"\n            >\n                <span v-html="$tc(\'swag-paypal.settingForm.checkout.banner\')"></span>\n            </sw-alert>\n            {% endblock %}\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_merchant_information %}\n            <p\n                v-if="showMerchantInformation"\n                class="swag-paypal-checkout__merchant-information"\n            >\n                {{ merchantEmail }}\n                <br>\n                {{ merchantInformation.merchantIntegrations.legal_name }}\n            </p>\n            {% endblock %}\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_onboarding %}\n                {% block swag_paypal_content_card_channel_config_checkout_container_onboarding_button %}\n                <a\n                    class="sw-button sw-button--ghost"\n                    target="_blank"\n                    :href="onboardingUrlLive"\n                    :disabled="!acl.can(\'swag_paypal.editor\')"\n                    data-paypal-onboard-complete="onboardingCallbackLive"\n                    data-paypal-button="true"\n                >\n                    {{ liveButtonTitle }}\n                </a>\n                <a\n                    class="swag-paypal-checkout__button-onboarding-sandbox"\n                    target="_blank"\n                    :href="onboardingUrlSandbox"\n                    :disabled="!acl.can(\'swag_paypal.editor\')"\n                    data-paypal-onboard-complete="onboardingCallbackSandbox"\n                    data-paypal-button="true"\n                >\n                    {{ sandboxButtonTitle }}\n                </a>\n                {% endblock %}\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods %}\n        <p class="swag-paypal-checkout__payment-method-headline">\n            {{ $tc(\'swag-paypal.settingForm.checkout.paymentMethodText\') }}\n        </p>\n        {% endblock %}\n\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items %}\n        <div class="swag-paypal-checkout-payment-method_container">\n\n            {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items_item %}\n            <swag-paypal-checkout-method\n                v-for="paymentMethod in paymentMethods"\n                :key="paymentMethod.id"\n                :payment-method="paymentMethod"\n                :onboarding-status="onboardingStatus(paymentMethod)"\n                :actual-config-data="actualConfigData"\n            />\n            {% endblock %}\n\n        </div>\n        {% endblock %}\n\n        {% block swag_paypal_content_card_channel_config_checkout_container_credentials_slot %}\n        <slot name="credentials"></slot>\n        {% endblock %}\n\n    </div>\n    {% endblock %}\n\n    {% block sw_deactivate_paypal_plus_modal %}\n    <sw-modal\n        v-if="plusDeprecationModalOpen"\n        class="swag-paypal-checkout-modal"\n        :title="$tc(\'swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.title\')"\n        variant="default"\n        @modal-close="closeModal"\n    >\n        {% block sw_deactivate_paypal_plus_modal_text %}\n        <p class="swag-paypal-checkout-modal__text">\n            {{ $tc(\'swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.text\') }}\n        </p>\n        {% endblock %}\n\n        {% block sw_deactivate_paypal_plus_modal_warning %}\n        <sw-alert\n            class="swag-paypal-checkout-modal__warning"\n            variant="warning"\n        >\n            {{ $tc(\'swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.warning\') }}\n        </sw-alert>\n        {% endblock %}\n\n        {% block sw_deactivate_paypal_plus_modal_footer %}\n        <template #modal-footer>\n            {% block sw_deactivate_paypal_plus_modal_cancel_button %}\n            <sw-button @click="closeModal">\n                {{ $tc(\'swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.cancel\') }}\n            </sw-button>\n            {% endblock %}\n\n            {% block ssw_deactivate_paypal_plus_modal_confirm_button %}\n            <sw-button\n                variant="primary"\n                @click="deactivatePayPalPlus"\n            >\n                {{ $tc(\'swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.deactivate\') }}\n            </sw-button>\n            {% endblock %}\n\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n</sw-card>\n{% endblock %}\n',inject:["acl","repositoryFactory","SwagPayPalApiCredentialsService"],mixins:["notification","swag-paypal-credentials-loader"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null},clientIdErrorState:{type:Object,required:!1,default:null},clientSecretErrorState:{type:Object,required:!1,default:null},clientIdSandboxErrorState:{type:Object,required:!1,default:null},clientSecretSandboxErrorState:{type:Object,required:!1,default:null},clientIdFilled:{type:Boolean,required:!1,default:!1},clientSecretFilled:{type:Boolean,required:!1,default:!1},clientIdSandboxFilled:{type:Boolean,required:!1,default:!1},clientSecretSandboxFilled:{type:Boolean,required:!1,default:!1},isLoading:{type:Boolean,required:!0}},data(){return{paymentMethods:[],merchantInformation:{merchantIntegrations:{legalName:null,primaryEmail:null},capabilities:[]},plusDeprecationModalOpen:!1,showHintMerchantIdMustBeEnteredManually:!1,isLoadingPaymentMethods:!1}},computed:{assetFilter(){return Shopware.Filter.getByName("asset")},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},paymentMethodCriteria(){let e=new h(1,500);return e.addAssociation("media"),e.addFilter(h.equals("plugin.name","SwagPayPal")),e.addSorting(h.sort("position","ASC"),!0),e},isLive(){return!this.isSandbox},isSandbox(){return this.actualConfigData["SwagPayPal.settings.sandbox"]},liveButtonTitle(){return this.actualConfigData["SwagPayPal.settings.clientSecret"]?this.isSandbox?this.$tc("swag-paypal.settingForm.checkout.button.changeLiveTitle"):this.isOnboardingPPCPFinished?this.paymentMethods.some(e=>"active"!==this.onboardingStatus(e))?this.$tc("swag-paypal.settingForm.checkout.button.restartOnboardingLiveTitle"):this.$tc("swag-paypal.settingForm.checkout.button.changeLiveTitle"):this.$tc("swag-paypal.settingForm.checkout.button.onboardingLiveTitle"):this.$tc("swag-paypal.settingForm.checkout.button.liveTitle")},sandboxButtonTitle(){return this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]?this.isLive?this.$tc("swag-paypal.settingForm.checkout.button.changeSandboxTitle"):this.isOnboardingPPCPFinished?this.paymentMethods.find(e=>"active"!==this.onboardingStatus(e))?this.$tc("swag-paypal.settingForm.checkout.button.restartOnboardingSandboxTitle"):this.$tc("swag-paypal.settingForm.checkout.button.changeSandboxTitle"):this.$tc("swag-paypal.settingForm.checkout.button.onboardingSandboxTitle"):this.$tc("swag-paypal.settingForm.checkout.button.sandboxTitle")},sandboxToggleDisabled(){return(!this.actualConfigData["SwagPayPal.settings.clientSecret"]&&this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]&&this.isSandbox||this.actualConfigData["SwagPayPal.settings.clientSecret"]&&!this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]&&this.isLive)&&!this.selectedSalesChannelId},isOnboardingPPCPFinished(){let e=this.paymentMethods.find(e=>"handler_swag_sepahandler"===e.formattedHandlerIdentifier);return!!e&&"active"===this.onboardingStatus(e)},showMerchantInformation(){return this.isOnboardingPPCPFinished},showSandboxToggle(){return this.actualConfigData["SwagPayPal.settings.clientSecret"]||this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]||this.selectedSalesChannelId},merchantEmail(){return this.merchantInformation.merchantIntegrations.primary_email??this.merchantInformation.merchantIntegrations.tracking_id}},watch:{isSandbox(){this.$emit("on-save-settings")},isOnboardingPPCPFinished(){let e=this.actualConfigData["SwagPayPal.settings.plusCheckoutEnabled"];e&&(this.plusDeprecationModalOpen=e&&this.isOnboardingPPCPFinished)}},created(){this.createdComponent()},methods:{async createdComponent(){await this.getPaymentMethodsAndMerchantIntegrations()},deactivatePayPalPlus(){this.$set(this.actualConfigData,"SwagPayPal.settings.plusCheckoutEnabled",!1),this.$set(this.actualConfigData,"SwagPayPal.settings.merchantLocation","other"),this.$set(this.actualConfigData,"SwagPayPal.settings.spbAlternativePaymentMethodsEnabled",!1),this.$emit("on-deactivate-paypal-plus"),this.plusDeprecationModalOpen=!1},async getPaymentMethodsAndMerchantIntegrations(){this.isLoadingPaymentMethods=!0,await this.fetchMerchantIntegrations(),await this.getPaymentMethods(),this.isLoadingPaymentMethods=!1},async getPaymentMethods(){this.paymentMethods=await this.paymentMethodRepository.search(this.paymentMethodCriteria,u.api).then(e=>e.filter(e=>"handler_swag_pospayment"!==e.formattedHandlerIdentifier&&"handler_swag_trustlyapmhandler"!==e.formattedHandlerIdentifier))},async fetchMerchantIntegrations(){this.merchantInformation=await this.SwagPayPalApiCredentialsService.getMerchantInformation(this.selectedSalesChannelId).then(e=>e),this.merchantIntegrations=this.merchantInformation.capabilities},onboardingStatus(e){return this.merchantInformation.capabilities[e.id]},onChangePaymentMethodActive(e){e.active=!e.active,this.paymentMethodRepository.save(e,u.api).then(()=>{let n=e.active?"active":"inactive";this.createNotificationSuccess({message:this.$tc(`swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${n}`,0,{name:e.name})})})},closeModal(){this.plusDeprecationModalOpen=!1},onPayPalCredentialsLoadSuccess(e,n,a,t){this.setConfig(e,n,a,t),this.$emit("on-save-settings")},onPayPalCredentialsLoadFailed(e){this.setConfig("","","",e),this.createNotificationError({message:this.$tc("swag-paypal.settingForm.credentials.button.messageFetchedError"),duration:1e4})},setConfig(e,n,a,t){let l=t?"Sandbox":"";this.$set(this.actualConfigData,`SwagPayPal.settings.clientId${l}`,e),this.$set(this.actualConfigData,`SwagPayPal.settings.clientSecret${l}`,n),this.$set(this.actualConfigData,`SwagPayPal.settings.merchantPayerId${l}`,a)},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}}),a(8075);let{Component:_,Context:w}=Shopware;_.register("swag-paypal-checkout-method",{template:'{% block swag_paypal_checkout_method %}\n<div class="swag-paypal-checkout-method">\n\n    {% block swag_paypal_checkout_method_icon %}\n    <img\n        v-if="paymentMethod.media"\n        class="swag-paypal-checkout-method__icon"\n        :src="paymentMethod.media.url"\n        :alt="paymentMethod.media.translated.alt"\n    >\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_name %}\n    <div class="swag-paypal-checkout-method__name">\n        {{ paymentMethod.translated.name }}\n    </div>\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_dynamic %}\n    <div class="swag-paypal-checkout-method__dynamic">\n        {% block swag_paypal_checkout_method_pui_help_text %}\n        <sw-help-text\n            v-if="availabilityToolTip"\n            :text="availabilityToolTip"\n        />\n        {% endblock %}\n\n        {% block swag_paypal_checkout_method_onboarding_status %}\n        <sw-label\n            v-tooltip="{\n                message: onboardingStatusTooltip,\n                position: \'top\',\n                disabled: !onboardingStatusTooltip,\n            }"\n            class="swag-plugin-box-with-onboarding__status-label"\n            size="medium"\n            appearance="pill"\n            :variant="statusBadgeVariant"\n            :ghost="false"\n            :caps="false"\n        >\n\n            {% block swag_paypal_checkout_method_onboarding_status_badge %}\n            <sw-color-badge\n                class="swag-plugin-box-with-onboarding__status-badge"\n                rounded\n                :color="statusBadgeColor"\n            />\n            {% endblock %}\n\n            {% block swag_paypal_checkout_method_onboarding_status_text %}\n            <span class="swag-plugin-box-with-onboarding__status-text">\n                {{ onboardingStatusText }}\n            </span>\n            {% endblock %}\n\n        </sw-label>\n        {% endblock %}\n\n        {% block swag_paypal_checkout_method_edit_detail_link %}\n        <router-link\n            v-if="showEditLink"\n            class="swag-paypal-checkout-method__show-detail-link"\n            :to="editLink"\n        >\n            {{ $tc(\'swag-paypal.settingForm.checkout.editDetail\') }}\n        </router-link>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_active_switch %}\n    <sw-switch-field\n        :label="$tc(\'swag-paypal.settingForm.checkout.switch.label\')"\n        :disabled="paymentMethodToggleDisabled || !acl.can(\'swag_paypal.editor\')"\n        :value="paymentMethod.active"\n        @update:value="onChangePaymentMethodActive"\n    />\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_apple_pay_domain_association %}\n        <swag-paypal-checkout-domain-association v-if="isApplePayAndActive" :is-sandbox="actualConfigData[\'SwagPayPal.settings.sandbox\']" />\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["acl","repositoryFactory"],mixins:["notification"],props:{paymentMethod:{type:Object,required:!0},onboardingStatus:{type:String,required:!1,default:"inactive"},actualConfigData:{type:Object,required:!0,default:()=>({})}},data(){return{merchantIntegrations:{}}},computed:{isApplePayAndActive(){let e=this.paymentMethod.formattedHandlerIdentifier.split("_");return"applepayhandler"===e[e.length-1]&&this.paymentMethod.active},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},editLink(){return{name:"sw.settings.payment.detail",params:{id:this.paymentMethod.id}}},paymentMethodToggleDisabled(){return!this.paymentMethod.active&&!this.showEditLink},showEditLink(){return["active","limited","mybank","sofort"].includes(this.onboardingStatus)},statusBadgeVariant(){let e;switch(this.onboardingStatus){case"active":e="success";break;case"limited":case"mybank":case"sofort":e="danger";break;case"inactive":case"ineligible":default:e="neutral";break;case"pending":e="info"}return e},statusBadgeColor(){let e;switch(this.onboardingStatus){case"active":e="#37D046";break;case"limited":case"mybank":case"sofort":e="#ff9800";break;case"inactive":case"ineligible":e="#52667A";break;default:e="#189eff"}return e},onboardingStatusText(){return this.$tc(`swag-paypal.settingForm.checkout.onboardingStatusText.${this.onboardingStatus}`)},onboardingStatusTooltip(){let e=`swag-paypal.settingForm.checkout.onboardingStatusTooltip.${this.onboardingStatus}`;return this.$te(e)?this.$tc(e):null},availabilityToolTip(){let e=this.paymentMethod.formattedHandlerIdentifier.split("_"),n=e[e.length-1],a=`swag-paypal.settingForm.checkout.availabilityToolTip.${n}`;return this.$te(a)?this.$tc(a):null}},methods:{onChangePaymentMethodActive(){this.paymentMethod.active=!this.paymentMethod.active,this.paymentMethodRepository.save(this.paymentMethod,w.api).then(()=>{let e=this.paymentMethod.active?"active":"inactive";this.createNotificationSuccess({message:this.$tc(`swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${e}`,0,{name:this.paymentMethod.name})})})}}}),a(8377);let{Component:b}=Shopware;b.register("swag-paypal-checkout-domain-association",{template:'<sw-alert\n        class="swag-plugin-apple-pay-warning"\n        variant="warning"\n>\n    {{ $tc(\'swag-paypal.settingForm.checkout.domainAssociation.title\') }}\n\n    <br />\n    <sw-external-link\n            class="mt-1"\n            :href="domainAssociationLink"\n    >\n        {{ $tc(\'swag-paypal.settingForm.checkout.domainAssociation.link\') }}\n    </sw-external-link>\n</sw-alert>\n',props:{isSandbox:{required:!0}},computed:{domainAssociationLink(){return this.isSandbox?"https://www.sandbox.paypal.com/uccservicing/apm/applepay":"https://www.paypal.com/uccservicing/apm/applepay"}}});let{Component:m}=Shopware;m.register("swag-paypal-created-component-helper",{template:"{% block swag_paypal_created_component_helper %}\n    {# only an empty element needed to render the component #}\n    <div/>\n{% endblock %}\n",created(){this.createdComponent()},methods:{createdComponent(){this.$emit("on-created-component")}}});let{Component:y}=Shopware;y.register("swag-paypal-credentials",{template:'{% block swag_paypal_content_card_channel_config_credentials %}\n    <sw-card position-identifier="swag-paypal-credentials"\n             :title="$tc(\'swag-paypal.settingForm.credentials.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_credentials_card_container %}\n            <sw-container>\n\n                {% block swag_paypal_content_card_channel_config_credentials_card_container_settings %}\n                    <div v-if="actualConfigData" class="swag-paypal-settings-credentials-fields">\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.clientId\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientId\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientId"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientId.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientId.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdErrorState"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.clientSecret\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecret\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecret"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecret.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecret.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretErrorState"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.merchantPayerId\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.merchantPayerId\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.merchantPayerId"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.merchantPayerId.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.merchantPayerId.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test %}\n                            <sw-button-process\n                                v-model:processSuccess="isTestLiveSuccessful"\n                                class="swag-paypal-settings-credentials-fields__test-button"\n                                :isLoading="isTestingLive"\n                                :disabled="testLiveButtonDisabled"\n                                @click="onTest(false)">\n                                {{ $tc(\'swag-paypal.settingForm.testLive\') }}\n                            </sw-button-process>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_sandbox %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.sandbox\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sandbox\']"\n                                :customInheritationCheckFunction="checkBoolFieldInheritance">\n                                <template #content="props">\n                                    <sw-switch-field name="SwagPayPal.settings.sandbox"\n                                                     :mapInheritance="props"\n                                                     :label="$tc(\'swag-paypal.settingForm.credentials.sandbox.label\')"\n                                                     :helpText="$tc(\'swag-paypal.settingForm.credentials.sandbox.tooltipText\')"\n                                                     :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                     :value="props.currentValue"\n                                                     @update:value="props.updateCurrentValue">\n                                    </sw-switch-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id_sandbox %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.clientIdSandbox\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientIdSandbox\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientIdSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdSandboxErrorState"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret_sandbox %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.clientSecretSandbox\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecretSandbox\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecretSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretSandboxErrorState"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id_sandbox %}\n                            <sw-inherit-wrapper\n                                v-model:value="actualConfigData[\'SwagPayPal.settings.merchantPayerIdSandbox\']"\n                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.merchantPayerIdSandbox\']"\n                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.merchantPayerIdSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.merchantPayerIdSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.merchantPayerIdSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                                   :value="props.currentValue"\n                                                   @update:value="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test_sandbox %}\n                            <sw-button-process\n                                v-model:processSuccess="isTestSandboxSuccessful"\n                                :isLoading="isTestingSandbox"\n                                :disabled="testSandboxButtonDisabled"\n                                @click="onTest(true)">\n                                {{ $tc(\'swag-paypal.settingForm.testSandbox\') }}\n                            </sw-button-process>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl","SwagPayPalApiCredentialsService"],mixins:["notification"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null},clientIdErrorState:{type:Object,required:!1,default:null},clientSecretErrorState:{type:Object,required:!1,default:null},clientIdSandboxErrorState:{type:Object,required:!1,default:null},clientSecretSandboxErrorState:{type:Object,required:!1,default:null},clientIdFilled:{type:Boolean,required:!0},clientSecretFilled:{type:Boolean,required:!0},clientIdSandboxFilled:{type:Boolean,required:!0},clientSecretSandboxFilled:{type:Boolean,required:!0},isLoading:{type:Boolean,required:!0}},data(){return{isTestingLive:!1,isTestingSandbox:!1,isTestLiveSuccessful:!1,isTestSandboxSuccessful:!1}},computed:{testLiveButtonDisabled(){return this.isLoading||!this.clientSecretFilled||!this.clientIdFilled||this.isTestingLive},testSandboxButtonDisabled(){return this.isLoading||!this.clientSecretSandboxFilled||!this.clientIdSandboxFilled||this.isTestingSandbox}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},onTest(e){e?this.isTestingSandbox=!0:this.isTestingLive=!0;let n=e?"Sandbox":"",a=this.actualConfigData[`SwagPayPal.settings.clientId${n}`]||this.allConfigs.null[`SwagPayPal.settings.clientId${n}`],t=this.actualConfigData[`SwagPayPal.settings.clientSecret${n}`]||this.allConfigs.null[`SwagPayPal.settings.clientSecret${n}`];this.SwagPayPalApiCredentialsService.validateApiCredentials(a,t,e).then(n=>{n.credentialsValid&&(e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!0):(this.isTestingLive=!1,this.isTestLiveSuccessful=!0))}).catch(n=>{if(n.response.data&&n.response.data.errors){let a=`<b>${this.$tc("swag-paypal.settingForm.messageTestError")}</b> `;a+=n.response.data.errors.map(e=>e.detail).join(" / "),this.createNotificationError({message:a}),e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!1):(this.isTestingLive=!1,this.isTestLiveSuccessful=!1)}})}}}),a(2660),Shopware.Component.register("swag-paypal-cross-border",{template:'{% block swag_paypal_cross_border %}\n<sw-card\n    :title="$tc(\'swag-paypal.cross-border.cardTitle\')"\n    :disabled="isLoading"\n    class="swag-paypal-cross-border"\n    position-identifier="swag-paypal-cross-border-card"\n>\n\n    {% block swag_paypal_cross_border_warning_text %}\n    <sw-alert class="swag-paypal-cross-border__warning-text" variant="warning">\n        {{ $t(\'swag-paypal.cross-border.warningText\') }}\n    </sw-alert>\n    {% endblock %}\n\n    {% block swag_paypal_cross_border_info_text %}\n    <span class="swag-paypal-cross-border__info-text">\n        {{ $tc(\'swag-paypal.cross-border.infoText\') }}\n    </span>\n    {% endblock %}\n\n    {% block swag_paypal_cross_border_messaging_enabled %}\n    <sw-inherit-wrapper\n        v-model:value="actualConfigData[\'SwagPayPal.settings.crossBorderMessagingEnabled\']"\n        :inherited-value="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.crossBorderMessagingEnabled\']"\n    >\n        <template #content="props">\n            <sw-switch-field\n                name="SwagPayPal.settings.crossBorderMessagingEnabled"\n                :map-inheritance="props"\n                :label="$tc(\'swag-paypal.cross-border.crossBorderMessagingEnable\')"\n                :disabled="isLoading || props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                :value="props.currentValue"\n                bordered\n                @update:value="props.updateCurrentValue"\n            />\n        </template>\n    </sw-inherit-wrapper>\n    {% endblock %}\n\n    {% block swag_paypal_cross_border_buyer_country_override %}\n    <sw-inherit-wrapper\n        v-model:value="actualConfigData[\'SwagPayPal.settings.crossBorderBuyerCountry\']"\n        :inherited-value="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.crossBorderBuyerCountry\']"\n    >\n        <template #content="props">\n            <sw-single-select\n                name="SwagPayPal.settings.crossBorderBuyerCountry"\n                :map-inheritance="props"\n                :label="$tc(\'swag-paypal.cross-border.crossBorderBuyerCountryOverride\')"\n                :disabled="isLoading || props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                :value="props.currentValue ?? null"\n                :options="countryOverrideOptions"\n                @update:value="props.updateCurrentValue"\n            />\n        </template>\n    </sw-inherit-wrapper>\n    {% endblock %}\n</sw-card>\n{% endblock %}\n',inject:["acl"],props:{isLoading:{type:Boolean,required:!1,default:!1},actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},computed:{countryOverrideOptions(){let e=[{label:this.$tc("locale.en-AU"),value:"en-AU"},{label:this.$tc("locale.de-DE"),value:"de-DE"},{label:this.$tc("locale.es-ES"),value:"es-ES"},{label:this.$tc("locale.fr-FR"),value:"fr-FR"},{label:this.$tc("locale.en-GB"),value:"en-GB"},{label:this.$tc("locale.it-IT"),value:"it-IT"},{label:this.$tc("locale.en-US"),value:"en-US"}].sort((e,n)=>e.label.localeCompare(n.label));return[{value:null,label:this.$tc("swag-paypal.cross-border.crossBorderBuyerCountryAuto")},...e]}}});let{Component:f}=Shopware;f.register("swag-paypal-express",{template:'{% block swag_paypal_content_card_channel_config_express %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-express"\n             :title="$tc(\'swag-paypal.settingForm.express.cardTitle\')"\n             :subtitle="$tc(\'swag-paypal.settingForm.express.cardSubtitle\')">\n\n        {% block swag_paypal_content_card_channel_config_express_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-express-fields">\n\n                {% block swag_paypal_content_card_channel_config_express_settings_detail_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsDetailEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_cart_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsCartEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_off_canvas_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsOffCanvasEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n\n                {% block swag_paypal_content_card_channel_config_express_settings_login_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsLoginEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_listing_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsListingEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || renderSettingsDisabled"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || renderSettingsDisabled"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_locale %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <swag-paypal-locale-field name="SwagPayPal.settings.ecsButtonLanguageIso"\n                                                    :mapInheritance="props"\n                                                    :label="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.label\')"\n                                                    :helpText="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.helpText\')"\n                                                    :disabled="props.isInherited || renderSettingsDisabled"\n                                                    :value="props.currentValue"\n                                                    @update:value="props.updateCurrentValue">\n                                                    @preventSave="preventSave">\n                            </swag-paypal-locale-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_show_pay_later %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.ecsShowPayLater\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsShowPayLater\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsShowPayLater"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsShowPayLater.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsShowPayLater.helpText\')"\n                                             :disabled="props.isInherited || renderSettingsDisabled"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")},{id:"white",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.white")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]},renderSettingsDisabled(){return!this.acl.can("swag_paypal.editor")||!this.actualConfigData["SwagPayPal.settings.ecsDetailEnabled"]&&!this.actualConfigData["SwagPayPal.settings.ecsCartEnabled"]&&!this.actualConfigData["SwagPayPal.settings.ecsOffCanvasEnabled"]&&!this.actualConfigData["SwagPayPal.settings.ecsProductDetailEnabled"]&&!this.actualConfigData["SwagPayPal.settings.ecsListingEnabled"]}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},preventSave(e){this.$emit("preventSave",e)}}});let{Component:S}=Shopware;S.register("swag-paypal-installment",{template:'{% block swag_paypal_content_card_channel_config_installment %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-installment"\n             :title="$tc(\'swag-paypal.settingForm.installment.cardTitle\')"\n             :subtitle="$tc(\'swag-paypal.settingForm.installment.cardSubtitle\')">\n\n        {% block swag_paypal_content_card_channel_config_installment_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-installment-fields">\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_detail_page_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.installmentBannerDetailPageEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerDetailPageEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerDetailPageEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_cart_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.installmentBannerCartEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerCartEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerCartEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.cart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.cart.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_off_canvas_cart_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.installmentBannerOffCanvasCartEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerOffCanvasCartEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerOffCanvasCartEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_login_page_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.installmentBannerEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerLoginPageEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerLoginPageEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_footer_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.installmentBannerFooterEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerFooterEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerFooterEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.footer.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.footer.helpText\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}}),a(8181);let{Component:v}=Shopware;v.register("swag-paypal-plus",{template:'{# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n{% block swag_paypal_content_card_channel_config_plus %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-plus"\n             :title="$tc(\'swag-paypal.settingForm.plus.cardTitle\')">\n\n        {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n        {% block swag_paypal_content_card_channel_config_plus_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-plus-fields">\n\n                {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                {% block swag_paypal_content_card_channel_config_plus_settings_warning %}\n                <template v-if="isPayPalPLUSActive">\n                    <sw-alert\n                        variant="warning"\n                    >\n                        <span v-html="$tc(\'swag-paypal.settingForm.plus.warning.active\')"></span>\n                    </sw-alert>\n                </template>\n\n                <template v-if="isPayPalPLUSInActive">\n                    <sw-alert\n                        variant="info"\n                    >\n                        <span v-html="$tc(\'swag-paypal.settingForm.plus.warning.inactive\')"></span>\n                    </sw-alert>\n                </template>\n                {% endblock %}\n\n                {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                {% block swag_paypal_content_card_channel_config_plus_settings_onboarding %}\n                    <p v-bind:class="{ \'swag-paypal-payal-plus-disabled\': isPayPalPLUSInActive}"\n                       v-html="$tc(\'swag-paypal.settingForm.plus.introduction\')"></p>\n                {% endblock %}\n\n                {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                {% block swag_paypal_content_card_channel_config_plus_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.plusCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.plus.plusCheckoutEnabled.label\')"\n                                             :disabled="ifItWasNotActive() || props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n\n                            {# @deprecated tag:v10.0.0 - Will be removed without replacement #}\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_intent_hint %}\n                                <swag-paypal-settings-hint :hintText="$tc(\'swag-paypal.settingForm.plus.hint\')">\n                                </swag-paypal-settings-hint>\n                            {% endblock %}\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},computed:{isPayPalPLUSActive(){return this.actualConfigData["SwagPayPal.settings.plusCheckoutEnabled"]},isPayPalPLUSInActive(){return!this.isPayPalPLUSActive}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},ifItWasNotActive(){return!this.actualConfigData["SwagPayPal.settings.plusCheckoutEnabled"]}}});let{Component:k}=Shopware;k.register("swag-paypal-pui",{template:'{% block swag_paypal_content_card_channel_config_pui %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-pui"\n             :title="$tc(\'swag-paypal.settingForm.pui.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_pui_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-pui-fields">\n\n                {% block swag_paypal_content_card_channel_config_pui_settings_customer_service_instructions %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.puiCustomerServiceInstructions\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.puiCustomerServiceInstructions\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.spbButtonLanguageIso"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.pui.customerServiceInstructions.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.pui.customerServiceInstructions.helpText\')"\n                                           :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                           :value="props.currentValue"\n                                           @update:value="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0}}}),a(787);let{Component:C}=Shopware;C.register("swag-paypal-settings-icon",{template:'{% block swag_paypal_settings_icon %}\n    <icons-paypal-multicolor class="swag-paypal-settings-icon"></icons-paypal-multicolor>\n{% endblock %}\n'});let{Component:P}=Shopware;P.register("swag-paypal-spb",{template:'{% block swag_paypal_content_card_channel_config_spb %}\n    <sw-card position-identifier="swag-paypal-card-channel-config-spb"\n             :title="$tc(\'swag-paypal.settingForm.spb.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_spb_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-spb-fields">\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbCheckoutEnabled.label\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_alternaitve_payment_methods_enabled %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbAlternativePaymentMethodsEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.helpText\')"\n                                             :disabled="props.isInherited || renderSettingsDisabled"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_show_pay_later %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.spbShowPayLater\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbShowPayLater\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbShowPayLater"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbShowPayLater.label\')"\n                                             :disabled="props.isInherited || renderSettingsDisabled"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.spbButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || renderSettingsDisabled"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.spbButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited || renderSettingsDisabled"\n                                              :value="props.currentValue"\n                                              @update:value="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_locale %}\n                    <sw-inherit-wrapper\n                            v-model:value="actualConfigData[\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                            :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                            :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <swag-paypal-locale-field name="SwagPayPal.settings.spbButtonLanguageIso"\n                                                    :mapInheritance="props"\n                                                    :label="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.label\')"\n                                                    :helpText="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.helpText\')"\n                                                    :disabled="props.isInherited || renderSettingsDisabled"\n                                                    :value="props.currentValue"\n                                                    @update:value="props.updateCurrentValue"\n                                                    @preventSave="preventSave">\n                            </swag-paypal-locale-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n',inject:["acl"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")},{id:"white",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.white")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]},renderSettingsDisabled(){return!this.acl.can("swag_paypal.editor")||!this.actualConfigData["SwagPayPal.settings.spbCheckoutEnabled"]}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},preventSave(e){this.$emit("preventSave",e)}}});let{Component:I}=Shopware;I.extend("swag-paypal-plugin-box-with-onboarding","sw-plugin-box",{template:'{% block sw_plugin_box_container_button %}\n<template>\n    {% block swag_paypal_plugin_box_with_button_link_to_extension %}\n        <sw-button\n            variant="ghost"\n            size="small"\n            class="sw-plugin-box__button"\n            :router-link="{ path: \'/swag/paypal/index\' }"\n        >\n            {{ $tc(\'sw-plugin-box.buttonPluginSettings\') }}\n        </sw-button>\n    {% endblock %}\n</template>\n{% endblock %}\n',props:{paymentMethod:{type:Object,required:!0}},methods:{createdComponent(){this.$super("createdComponent")}}}),a(2028);let{Component:x}=Shopware,{debounce:F}=Shopware.Utils;x.extend("swag-paypal-locale-field","sw-text-field",{template:'{% block sw_text_field %}\n    {% block swag_paypal_locale_field %}\n        <div class="swag-paypal-locale-field">\n\n            {% block swag_paypal_locale_field_contextual_field %}\n                <sw-contextual-field class="sw-field--text"\n                                     v-bind="$attrs"\n                                     :name="formFieldName"\n                                     :error="error"\n                                     @inheritance-restore="$emit(\'inheritance-restore\', $event)"\n                                     @inheritance-remove="$emit(\'inheritance-remove\', $event)">\n\n                    <template #sw-field-input="{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }">\n                        <input type="text"\n                               :name="identification"\n                               :id="identification"\n                               :disabled="disabled"\n                               :value="currentValue"\n                               :placeHolder="placeholder"\n                               @input="onInput"\n                               @focus="setFocusClass"\n                               @blur="onBlur($event, removeFocusClass)"\n                               v-on="additionalListeners">\n                    </template>\n                </sw-contextual-field>\n            {% endblock %}\n\n            {% block swag_paypal_locale_field_information %}\n                <p class="swag-paypal-locale-field__text">\n\n                    {% block swag_paypal_locale_field_information_text %}\n                        {{ $tc(\'swag-paypal.settingForm.locale-field.infobox.text\') }}\n                    {% endblock %}\n\n                    {% block swag_paypal_locale_field_information_href %}\n                        <sw-external-link class="swag-paypal-locale-field__text-href"\n                                          href="https://developer.paypal.com/docs/api/reference/locale-codes/">\n                            {{ $tc(\'swag-paypal.settingForm.locale-field.infobox.href\') }}\n                        </sw-external-link>\n                    {% endblock %}\n\n                </p>\n            {% endblock %}\n\n        </div>\n    {% endblock %}\n\n{% endblock %}\n',inject:["feature"],data(){return{error:null}},methods:{onInput:F(function(e){this.checkValue(e.target.value)},350),onBlur(e,n){n(),this.checkValue(e.target.value)},checkValue(e){if(this.$emit("update:value",e||""),!e||/^[a-z]{2}_[A-Z]{2}$/.exec(e)){this.preventSave(!1),this.error=null;return}this.preventSave(!0),this.error={code:1,detail:this.$tc("swag-paypal.settingForm.locale-field.error.detail")}},preventSave(e){this.$emit("preventSave",e)}}}),a(5930);let{Component:$}=Shopware;$.register("swag-paypal-vaulting",{template:'{% block swag_paypal_content_card_channel_config_vaulting %}\n    <sw-card positionIdentifier="swag-paypal-card-channel-config-vaulting"\n             :title="$tc(\'swag-paypal.settingForm.vaulting.cardTitle\')"\n             class="swag-paypal-vaulting"\n             :is-loading="isLoadingMerchantInformation"\n             help-text="test"\n    >\n        {% block swag_paypal_content_card_channel_config_vaulting_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-vaulting">\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_description_title %}\n                    <div class="swag-paypal-settings-vaulting-description-title">\n                        {{ $tc(\'swag-paypal.settingForm.vaulting.description.title\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_description_text %}\n                    <div>\n                        {{ $tc(\'swag-paypal.settingForm.vaulting.description.text\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_wallet %}\n                    <sw-inherit-wrapper\n                                        v-if="canHandleVaulting && !isLoadingMerchantInformation"\n                                        v-model:value="actualConfigData[\'SwagPayPal.settings.vaultingEnabledWallet\']"\n                                        :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.vaultingEnabledWallet\']"\n                                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.vaultingEnabledWallet"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.vaulting.enableWallet.label\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_acdc %}\n                    <sw-inherit-wrapper\n                        v-if="canHandleVaulting && !isLoadingMerchantInformation"\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.vaultingEnabledACDC\']"\n                        :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.vaultingEnabledACDC\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.vaultingEnabledACDC"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.vaulting.enableACDC.label\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_venmo %}\n                    <sw-inherit-wrapper\n                        v-if="canHandleVaulting && !isLoadingMerchantInformation"\n                        v-model:value="actualConfigData[\'SwagPayPal.settings.vaultingEnabledVenmo\']"\n                        :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.vaultingEnabledVenmo\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.vaultingEnabledVenmo"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.vaulting.enableVenmo.label\')"\n                                             :disabled="props.isInherited || !acl.can(\'swag_paypal.editor\')"\n                                             :value="props.currentValue"\n                                             @update:value="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_vaulting_settings_onboarding %}\n                    <div v-if="!canHandleVaulting && !isLoadingMerchantInformation">\n                        {% block swag_paypal_content_card_channel_config_vaulting_settings_onboarding_button %}\n                            <a\n                                v-show="!isSandbox"\n                                class="sw-button sw-button--ghost swag-paypal-settings-vaulting-activate-button"\n                                target="_blank"\n                                :href="onboardingUrlLive"\n                                :disabled="!acl.can(\'swag_paypal.editor\')"\n                                data-paypal-onboard-complete="onboardingCallbackLive"\n                                data-paypal-button="true"\n                            >\n                                {{ $tc(\'swag-paypal.settingForm.vaulting.activateButton.label\') }}\n                            </a>\n                            <a\n                                v-show="isSandbox"\n                                class="sw-button sw-button--ghost swag-paypal-settings-vaulting-activate-button"\n                                target="_blank"\n                                :href="onboardingUrlSandbox"\n                                :disabled="!acl.can(\'swag_paypal.editor\')"\n                                data-paypal-onboard-complete="onboardingCallbackSandbox"\n                                data-paypal-button="true"\n                            >\n                                {{ $tc(\'swag-paypal.settingForm.vaulting.activateButton.label\') }}\n                            </a>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n\n            </div>\n        {% endblock %}\n\n    </sw-card>\n{% endblock %}\n',inject:["acl","SwagPayPalApiCredentialsService"],mixins:["swag-paypal-credentials-loader"],props:{actualConfigData:{type:Object,required:!0,default:()=>({})},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{type:String,required:!1,default:null},isSaveSuccessful:{type:Boolean,required:!0}},data(){return{merchantInformation:null,isLoadingMerchantInformation:!1}},computed:{isSandbox(){return this.actualConfigData["SwagPayPal.settings.sandbox"]},canHandleVaulting(){return this.merchantInformation?.merchantIntegrations?.capabilities?.some(e=>e?.name==="PAYPAL_WALLET_VAULTING_ADVANCED"&&e?.status==="ACTIVE")}},watch:{isSaveSuccessful(e){!1!==e&&this.createdComponent()}},created(){this.createdComponent()},methods:{async createdComponent(){this.isLoadingMerchantInformation=!0,await this.fetchMerchantInformation(),this.isLoadingMerchantInformation=!1},async fetchMerchantInformation(){this.merchantInformation=await this.SwagPayPalApiCredentialsService.getMerchantInformation(this.selectedSalesChannelId)},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}}),a(6551);let T="missing",D="invalid";Shopware.Component.register("swag-paypal-webhook",{template:'{% block swag_paypal_webhook %}\n<sw-card\n    :isLoading="isFetchingStatus"\n    :disabled="isLoading"\n    class="swag-paypal-webhook"\n    position-identifier="swag-paypal-webhook-card"\n>\n    <template #title>\n        {% block swag_paypal_webhook_card_title %}\n        <span class="swag-paypal-webhook__title">\n            {{ $tc(\'swag-paypal.webhook.cardTitle\') }}\n        </span>\n\n        <sw-label\n            class="swag-paypal-webhook__label"\n            appearance="pill"\n            size="medium"\n            :variant="webhookStatusVariant"\n        >\n            <sw-color-badge :rounded="true" :variant="webhookStatusVariant"  />\n            <span>{{ webhookStatusLabel }}</span>\n        </sw-label>\n        {% endblock %}\n    </template>\n\n\n    {% block swag_paypal_webhook_info_text %}\n    <span class="swag-paypal-webhook__info-text">\n        {{ $tc(\'swag-paypal.webhook.infoText\') }}\n    </span>\n    {% endblock %}\n\n    {% block swag_paypal_webhook_refresh_button %}\n    <sw-button\n        class="swag-paypal-webhook__refresh-button"\n        variant=""\n        :disabled="isLoading || isRefreshing || isFetchingStatus || !allowRefresh || !acl.can(\'swag_paypal.editor\')"\n        :isLoading="isRefreshing"\n        @click="onRefreshWebhook"\n    >\n        {{ $tc(\'swag-paypal.webhook.buttonRefresh\') }}\n    </sw-button>\n    {% endblock %}\n</sw-card>\n{% endblock %}\n',inject:["acl","SwagPayPalWebhookService"],mixins:["notification"],props:{isLoading:{type:Boolean,required:!1,default:!1},selectedSalesChannelId:{type:String,required:!1,default:null}},data(){return{webhookStatus:null,isFetchingStatus:!1,isRefreshing:!1}},computed:{webhookStatusLabel(){return this.$tc(`swag-paypal.webhook.status.${this.webhookStatus||"unknown"}`)},webhookStatusVariant(){switch(this.webhookStatus){case T:return"danger";case D:return"warning";case"valid":return"success";default:return"neutral"}},allowRefresh(){return[D,T].includes(this.webhookStatus)}},created(){this.fetchWebhookStatus()},methods:{async fetchWebhookStatus(){this.isFetchingStatus=!0;let e=await this.SwagPayPalWebhookService.status(this.selectedSalesChannelId);this.webhookStatus=e.result,this.isFetchingStatus=!1},onRefreshWebhook(){return this.isRefreshing=!0,this.SwagPayPalWebhookService.register(this.selectedSalesChannelId).catch(e=>{this.createNotificationError({title:this.$tc("swag-paypal.webhook.refreshFailed.title"),message:e.response.data?.errors?.[0]?.detail??this.$tc("swag-paypal.webhook.refreshFailed.errorUnknown")})}).finally(()=>(this.isRefreshing=!1,this.fetchWebhookStatus()))}}});let{Module:E}=Shopware;E.register("swag-paypal",{type:"plugin",name:"SwagPayPal",title:"swag-paypal.general.mainMenuItemGeneral",description:"swag-paypal.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"regular-cog",routes:{index:{component:"swag-paypal",path:":tab?",meta:{parentPath:"sw.settings.index",privilege:"swag_paypal.viewer"}}},settingsItem:{group:"plugins",to:"swag.paypal.index",iconComponent:"swag-paypal-settings-icon",backgroundEnabled:!0,privilege:"swag_paypal.viewer"}})},8377:function(e,n,a){var t=a(7534);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("1f2846b4",t,!0,{})},8075:function(e,n,a){var t=a(4231);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("1dee3f8b",t,!0,{})},2914:function(e,n,a){var t=a(464);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("076a95ca",t,!0,{})},2660:function(e,n,a){var t=a(5921);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("38776e0e",t,!0,{})},2028:function(e,n,a){var t=a(4965);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("6f172588",t,!0,{})},8181:function(e,n,a){var t=a(1719);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("44bb726f",t,!0,{})},751:function(e,n,a){var t=a(6313);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("21242da2",t,!0,{})},787:function(e,n,a){var t=a(3778);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("4595b6b0",t,!0,{})},5930:function(e,n,a){var t=a(6785);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("8aeff6f6",t,!0,{})},6551:function(e,n,a){var t=a(6515);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("621f5dc8",t,!0,{})},2862:function(e,n,a){var t=a(9183);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals),a(5346).Z("745add6d",t,!0,{})},5346:function(e,n,a){"use strict";function t(e,n){for(var a=[],t={},l=0;l<n.length;l++){var s=n[l],i=s[0],o={id:e+":"+l,css:s[1],media:s[2],sourceMap:s[3]};t[i]?t[i].parts.push(o):a.push(t[i]={id:i,parts:[o]})}return a}a.d(n,{Z:function(){return h}});var l="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!l)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},i=l&&(document.head||document.getElementsByTagName("head")[0]),o=null,r=0,c=!1,p=function(){},d=null,g="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,n,a,l){c=a,d=l||{};var i=t(e,n);return _(i),function(n){for(var a=[],l=0;l<i.length;l++){var o=s[i[l].id];o.refs--,a.push(o)}n?_(i=t(e,n)):i=[];for(var l=0;l<a.length;l++){var o=a[l];if(0===o.refs){for(var r=0;r<o.parts.length;r++)o.parts[r]();delete s[o.id]}}}}function _(e){for(var n=0;n<e.length;n++){var a=e[n],t=s[a.id];if(t){t.refs++;for(var l=0;l<t.parts.length;l++)t.parts[l](a.parts[l]);for(;l<a.parts.length;l++)t.parts.push(b(a.parts[l]));t.parts.length>a.parts.length&&(t.parts.length=a.parts.length)}else{for(var i=[],l=0;l<a.parts.length;l++)i.push(b(a.parts[l]));s[a.id]={id:a.id,refs:1,parts:i}}}}function w(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function b(e){var n,a,t=document.querySelector("style["+g+'~="'+e.id+'"]');if(t){if(c)return p;t.parentNode.removeChild(t)}if(u){var l=r++;n=y.bind(null,t=o||(o=w()),l,!1),a=y.bind(null,t,l,!0)}else n=f.bind(null,t=w()),a=function(){t.parentNode.removeChild(t)};return n(e),function(t){t?(t.css!==e.css||t.media!==e.media||t.sourceMap!==e.sourceMap)&&n(e=t):a()}}var m=function(){var e=[];return function(n,a){return e[n]=a,e.filter(Boolean).join("\n")}}();function y(e,n,a,t){var l=a?"":t.css;if(e.styleSheet)e.styleSheet.cssText=m(n,l);else{var s=document.createTextNode(l),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(s,i[n]):e.appendChild(s)}}function f(e,n){var a=n.css,t=n.media,l=n.sourceMap;if(t&&e.setAttribute("media",t),d.ssrId&&e.setAttribute(g,n.id),l&&(a+="\n/*# sourceURL="+l.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}}}]);